//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.11.2
//     from Assets/Input/CustomInput.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @CustomInput: IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @CustomInput()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""CustomInput"",
    ""maps"": [
        {
            ""name"": ""Cheats"",
            ""id"": ""9101ea43-9b26-4de5-bae1-a66183356ddd"",
            ""actions"": [
                {
                    ""name"": ""OnSpawnGun"",
                    ""type"": ""Button"",
                    ""id"": ""ea1eadb1-cfd3-47be-8f85-0289a004119b"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""50d25482-483b-4ae7-b27f-f46becc66020"",
                    ""path"": ""<Keyboard>/z"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""OnSpawnGun"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        },
        {
            ""name"": ""Player"",
            ""id"": ""8203f78d-0a73-4fe0-9547-bd5c26c40d56"",
            ""actions"": [
                {
                    ""name"": ""OnMovement"",
                    ""type"": ""Value"",
                    ""id"": ""02a8938d-2ad1-48b5-aaf8-7f66897305d8"",
                    ""expectedControlType"": ""Axis"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""OnFire"",
                    ""type"": ""Button"",
                    ""id"": ""3acc0ae2-2ce1-4809-b19e-4c85d5186637"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""OnJump"",
                    ""type"": ""Button"",
                    ""id"": ""4ac6ba7b-d1b7-4df5-98f9-7699a08cb3d2"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": ""AD"",
                    ""id"": ""b98e32db-80bc-47e8-97d8-ccf37923a127"",
                    ""path"": ""1DAxis"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""OnMovement"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""Negative"",
                    ""id"": ""724885a6-cf18-4d27-82d6-c298ec1b9f19"",
                    ""path"": ""<Keyboard>/a"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""OnMovement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""Positive"",
                    ""id"": ""82824dfc-8b08-4f47-992b-55f2963fbce7"",
                    ""path"": ""<Keyboard>/d"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""OnMovement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""Arrows"",
                    ""id"": ""e8408cc8-a6f7-4bc2-bc3c-46b714ce0cc1"",
                    ""path"": ""1DAxis"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""OnMovement"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""negative"",
                    ""id"": ""bf73f42c-29e6-4493-8b4e-7700e2bc69e9"",
                    ""path"": ""<Keyboard>/leftArrow"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""OnMovement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""positive"",
                    ""id"": ""3a376aa9-cd01-4961-8871-c9f789348441"",
                    ""path"": ""<Keyboard>/rightArrow"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""OnMovement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": """",
                    ""id"": ""0f9aaecf-473b-4f9c-9d97-51dc3396c01f"",
                    ""path"": ""<Mouse>/leftButton"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""OnFire"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""abb48d19-e59d-45cd-834f-b97dabf29dcc"",
                    ""path"": ""<Keyboard>/space"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""OnJump"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        },
        {
            ""name"": ""Game"",
            ""id"": ""d9e3dce8-6f84-41ec-84dc-9e16d900cc1d"",
            ""actions"": [
                {
                    ""name"": ""OnGameStart"",
                    ""type"": ""Button"",
                    ""id"": ""f6b39353-2b2b-4815-b432-5b4ca3551a51"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""OnRestartLevel"",
                    ""type"": ""Button"",
                    ""id"": ""a45c620e-bfec-4643-8b2c-8c1734d195dd"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""38097423-6c01-4b76-a8fc-63d04dc7a132"",
                    ""path"": ""<Keyboard>/anyKey"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""OnGameStart"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""1941256b-7afc-4c72-8525-a02401118d39"",
                    ""path"": ""<Mouse>/rightButton"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""OnGameStart"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""e4f4c0cc-8dc3-4285-8275-22ea4561730e"",
                    ""path"": ""<Mouse>/leftButton"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""OnGameStart"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""2bcf2b7b-4bbf-45cc-a7e9-eaafb3eb1c3d"",
                    ""path"": ""<Keyboard>/r"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""OnRestartLevel"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": []
}");
        // Cheats
        m_Cheats = asset.FindActionMap("Cheats", throwIfNotFound: true);
        m_Cheats_OnSpawnGun = m_Cheats.FindAction("OnSpawnGun", throwIfNotFound: true);
        // Player
        m_Player = asset.FindActionMap("Player", throwIfNotFound: true);
        m_Player_OnMovement = m_Player.FindAction("OnMovement", throwIfNotFound: true);
        m_Player_OnFire = m_Player.FindAction("OnFire", throwIfNotFound: true);
        m_Player_OnJump = m_Player.FindAction("OnJump", throwIfNotFound: true);
        // Game
        m_Game = asset.FindActionMap("Game", throwIfNotFound: true);
        m_Game_OnGameStart = m_Game.FindAction("OnGameStart", throwIfNotFound: true);
        m_Game_OnRestartLevel = m_Game.FindAction("OnRestartLevel", throwIfNotFound: true);
    }

    ~@CustomInput()
    {
        UnityEngine.Debug.Assert(!m_Cheats.enabled, "This will cause a leak and performance issues, CustomInput.Cheats.Disable() has not been called.");
        UnityEngine.Debug.Assert(!m_Player.enabled, "This will cause a leak and performance issues, CustomInput.Player.Disable() has not been called.");
        UnityEngine.Debug.Assert(!m_Game.enabled, "This will cause a leak and performance issues, CustomInput.Game.Disable() has not been called.");
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }

    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }

    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // Cheats
    private readonly InputActionMap m_Cheats;
    private List<ICheatsActions> m_CheatsActionsCallbackInterfaces = new List<ICheatsActions>();
    private readonly InputAction m_Cheats_OnSpawnGun;
    public struct CheatsActions
    {
        private @CustomInput m_Wrapper;
        public CheatsActions(@CustomInput wrapper) { m_Wrapper = wrapper; }
        public InputAction @OnSpawnGun => m_Wrapper.m_Cheats_OnSpawnGun;
        public InputActionMap Get() { return m_Wrapper.m_Cheats; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(CheatsActions set) { return set.Get(); }
        public void AddCallbacks(ICheatsActions instance)
        {
            if (instance == null || m_Wrapper.m_CheatsActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_CheatsActionsCallbackInterfaces.Add(instance);
            @OnSpawnGun.started += instance.OnOnSpawnGun;
            @OnSpawnGun.performed += instance.OnOnSpawnGun;
            @OnSpawnGun.canceled += instance.OnOnSpawnGun;
        }

        private void UnregisterCallbacks(ICheatsActions instance)
        {
            @OnSpawnGun.started -= instance.OnOnSpawnGun;
            @OnSpawnGun.performed -= instance.OnOnSpawnGun;
            @OnSpawnGun.canceled -= instance.OnOnSpawnGun;
        }

        public void RemoveCallbacks(ICheatsActions instance)
        {
            if (m_Wrapper.m_CheatsActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(ICheatsActions instance)
        {
            foreach (var item in m_Wrapper.m_CheatsActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_CheatsActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public CheatsActions @Cheats => new CheatsActions(this);

    // Player
    private readonly InputActionMap m_Player;
    private List<IPlayerActions> m_PlayerActionsCallbackInterfaces = new List<IPlayerActions>();
    private readonly InputAction m_Player_OnMovement;
    private readonly InputAction m_Player_OnFire;
    private readonly InputAction m_Player_OnJump;
    public struct PlayerActions
    {
        private @CustomInput m_Wrapper;
        public PlayerActions(@CustomInput wrapper) { m_Wrapper = wrapper; }
        public InputAction @OnMovement => m_Wrapper.m_Player_OnMovement;
        public InputAction @OnFire => m_Wrapper.m_Player_OnFire;
        public InputAction @OnJump => m_Wrapper.m_Player_OnJump;
        public InputActionMap Get() { return m_Wrapper.m_Player; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(PlayerActions set) { return set.Get(); }
        public void AddCallbacks(IPlayerActions instance)
        {
            if (instance == null || m_Wrapper.m_PlayerActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_PlayerActionsCallbackInterfaces.Add(instance);
            @OnMovement.started += instance.OnOnMovement;
            @OnMovement.performed += instance.OnOnMovement;
            @OnMovement.canceled += instance.OnOnMovement;
            @OnFire.started += instance.OnOnFire;
            @OnFire.performed += instance.OnOnFire;
            @OnFire.canceled += instance.OnOnFire;
            @OnJump.started += instance.OnOnJump;
            @OnJump.performed += instance.OnOnJump;
            @OnJump.canceled += instance.OnOnJump;
        }

        private void UnregisterCallbacks(IPlayerActions instance)
        {
            @OnMovement.started -= instance.OnOnMovement;
            @OnMovement.performed -= instance.OnOnMovement;
            @OnMovement.canceled -= instance.OnOnMovement;
            @OnFire.started -= instance.OnOnFire;
            @OnFire.performed -= instance.OnOnFire;
            @OnFire.canceled -= instance.OnOnFire;
            @OnJump.started -= instance.OnOnJump;
            @OnJump.performed -= instance.OnOnJump;
            @OnJump.canceled -= instance.OnOnJump;
        }

        public void RemoveCallbacks(IPlayerActions instance)
        {
            if (m_Wrapper.m_PlayerActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(IPlayerActions instance)
        {
            foreach (var item in m_Wrapper.m_PlayerActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_PlayerActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public PlayerActions @Player => new PlayerActions(this);

    // Game
    private readonly InputActionMap m_Game;
    private List<IGameActions> m_GameActionsCallbackInterfaces = new List<IGameActions>();
    private readonly InputAction m_Game_OnGameStart;
    private readonly InputAction m_Game_OnRestartLevel;
    public struct GameActions
    {
        private @CustomInput m_Wrapper;
        public GameActions(@CustomInput wrapper) { m_Wrapper = wrapper; }
        public InputAction @OnGameStart => m_Wrapper.m_Game_OnGameStart;
        public InputAction @OnRestartLevel => m_Wrapper.m_Game_OnRestartLevel;
        public InputActionMap Get() { return m_Wrapper.m_Game; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(GameActions set) { return set.Get(); }
        public void AddCallbacks(IGameActions instance)
        {
            if (instance == null || m_Wrapper.m_GameActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_GameActionsCallbackInterfaces.Add(instance);
            @OnGameStart.started += instance.OnOnGameStart;
            @OnGameStart.performed += instance.OnOnGameStart;
            @OnGameStart.canceled += instance.OnOnGameStart;
            @OnRestartLevel.started += instance.OnOnRestartLevel;
            @OnRestartLevel.performed += instance.OnOnRestartLevel;
            @OnRestartLevel.canceled += instance.OnOnRestartLevel;
        }

        private void UnregisterCallbacks(IGameActions instance)
        {
            @OnGameStart.started -= instance.OnOnGameStart;
            @OnGameStart.performed -= instance.OnOnGameStart;
            @OnGameStart.canceled -= instance.OnOnGameStart;
            @OnRestartLevel.started -= instance.OnOnRestartLevel;
            @OnRestartLevel.performed -= instance.OnOnRestartLevel;
            @OnRestartLevel.canceled -= instance.OnOnRestartLevel;
        }

        public void RemoveCallbacks(IGameActions instance)
        {
            if (m_Wrapper.m_GameActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(IGameActions instance)
        {
            foreach (var item in m_Wrapper.m_GameActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_GameActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public GameActions @Game => new GameActions(this);
    public interface ICheatsActions
    {
        void OnOnSpawnGun(InputAction.CallbackContext context);
    }
    public interface IPlayerActions
    {
        void OnOnMovement(InputAction.CallbackContext context);
        void OnOnFire(InputAction.CallbackContext context);
        void OnOnJump(InputAction.CallbackContext context);
    }
    public interface IGameActions
    {
        void OnOnGameStart(InputAction.CallbackContext context);
        void OnOnRestartLevel(InputAction.CallbackContext context);
    }
}
